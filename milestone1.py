import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn import preprocessing
from sklearn import svm
from sklearn.linear_model import LinearRegression
train=pd.read_csv("train.csv")
train = train.replace(' ', np.nan)
train["X9"].fillna( method ='ffill', inplace = True)
train["X2"].fillna( method ='ffill', inplace = True)
train.isnull().sum()
train["X3"]=train["X3"].replace(to_replace=["LF","low fat"],value="Low Fat")
train["X3"]=train["X3"].replace(to_replace=["reg"],value="Regular")
train.drop(["X1","X7"],inplace=True,axis=1)
m=train["X4"].mean()
train["X4"]=train["X4"].replace(to_replace=0,value=m)
scaler = MinMaxScaler()
train["X6"] = scaler.fit_transform(train["X6"].values.reshape(-1,1))
train["X2"] = scaler.fit_transform(train["X2"].values.reshape(-1,1))
train.rename(columns={'X2': 'Weight of Item', 'X3': 'Amount of Fats in Item','X4': 'area allocated for item in store ','X5': 'Item Category','X6': 'Item Price','X8': 'Store Establishment Year','X9': 'Store Size','X10': 'Store Location Type','X11': 'Store Type','Y':'label'}, inplace=True)
train.drop(["Store Establishment Year"],inplace=True,axis=1)
label=preprocessing.LabelEncoder()
train["Amount of Fats in Item"]=train["Amount of Fats in Item"].replace(to_replace="Low Fat",value=1)
train["Amount of Fats in Item"]=train["Amount of Fats in Item"].replace(to_replace="Regular",value=0)
onehotencoder = OneHotEncoder()
#x=onehotencoder.fit_transform(train["Item Category"].values.reshape(-1,1)).toarray()
#dfo=pd.DataFrame(x,columns=["Category_"+str(int(i))for i in range(16)])
#train=pd.concat([train,dfo],axis=1)
x=onehotencoder.fit_transform(train["Item Category"].values.reshape(-1,1)).toarray()
dfo=pd.DataFrame(x,columns=["Category_"+str(int(i))for i in range(16)])
train=pd.concat([train,dfo],axis=1)
train.drop("Item Category",inplace=True,axis=1)
#train.drop("Item Category",inplace=True,axis=1)
train["Store Size"]=train["Store Size"].replace(to_replace="High",value=2)
train["Store Size"]=train["Store Size"].replace(to_replace="Medium",value=1)
train["Store Size"]=train["Store Size"].replace(to_replace="Small",value=0)
x=onehotencoder.fit_transform(train["Store Location Type"].values.reshape(-1,1)).toarray()
dfo=pd.DataFrame(x,columns=["store_loc"+str(int(i))for i in range(3)])
train=pd.concat([train,dfo],axis=1)
train.drop("Store Location Type",inplace=True,axis=1)


x=onehotencoder.fit_transform(train["Store Type"].values.reshape(-1,1)).toarray()
dfo=pd.DataFrame(x,columns=["store_type"+str(int(i))for i in range(4)])
train=pd.concat([train,dfo],axis=1)
train.drop("Store Type",inplace=True,axis=1)
r=train.columns
x_train=train[['Weight of Item','Amount of Fats in Item','Category_0','Category_1','Category_2','Category_3','Category_4','Category_5','Category_6','Category_7','Category_8','Category_9','Category_10','Category_11','Category_12','Category_13','Category_14','Category_15','area allocated for item in store ','Item Price','Store Size','store_loc0','store_loc1','store_loc2','store_type0','store_type1','store_type2','store_type3']]
y_train=train['label']
y_train=pd.DataFrame(y_train)
#x_train, x_test, y_train, y_test = train_test_split(x1, y, test_size=2000)
clf = Ridge()
clf.fit(x_train, y_train)
#yu=clf.predict(x_test)
#cg=LinearRegression()
#cg.fit(x_train, y_train)
#yu=cg.predict(x_test)
#print("reg",mean_squared_error(y_test, yu))
#regr = MLPRegressor(random_state=1,max_iter=300).fit(x_train, y_train)
#yu=regr.predict(x_test)
#print("mlp",mean_squared_error(y_test, yu))
#########################################################
test=pd.read_csv("test.csv")
test = test.replace(' ', np.nan)
test["X9"].fillna( method ='ffill', inplace = True)
test["X2"].fillna( method ='ffill', inplace = True)
test["X3"]=test["X3"].replace(to_replace=["LF","low fat"],value="Low Fat")
test["X3"]=test["X3"].replace(to_replace=["reg"],value="Regular")
test.drop(["X1","X7"],inplace=True,axis=1)
m=test["X4"].mean()
test["X4"]=test["X4"].replace(to_replace=0,value=m)
scaler = MinMaxScaler()
test["X6"] = scaler.fit_transform(test["X6"].values.reshape(-1,1))
test["X2"] = scaler.fit_transform(test["X2"].values.reshape(-1,1))
test.rename(columns={'X2': 'Weight of Item', 'X3': 'Amount of Fats in Item','X4': 'area allocated for item in store ','X5': 'Item Category','X6': 'Item Price','X8': 'Store Establishment Year','X9': 'Store Size','X10': 'Store Location Type','X11': 'Store Type'}, inplace=True)
test.drop(["Store Establishment Year"],inplace=True,axis=1)
test["Amount of Fats in Item"]=test["Amount of Fats in Item"].replace(to_replace="Low Fat",value=1)
test["Amount of Fats in Item"]=test["Amount of Fats in Item"].replace(to_replace="Regular",value=0)
#onehotencoder = OneHotEncoder()
#u=onehotencoder.fit_transform(test["Item Category"].values.reshape(-1,1)).toarray()
#dfo=pd.DataFrame(u,columns=["Category_"+str(int(i))for i in range(16)])
#test=pd.concat([test,dfo],axis=1)
#test.drop("Item Category",inplace=True,axis=1)
label=preprocessing.LabelEncoder()
x=onehotencoder.fit_transform(test["Item Category"].values.reshape(-1,1)).toarray()
dfo=pd.DataFrame(x,columns=["Category_"+str(int(i))for i in range(4)])
test=pd.concat([test,dfo],axis=1)
test.drop("Item Category",inplace=True,axis=1)
test["Store Size"]=test["Store Size"].replace(to_replace="High",value=2)
test["Store Size"]=test["Store Size"].replace(to_replace="Medium",value=1)
test["Store Size"]=test["Store Size"].replace(to_replace="Small",value=0)
x=onehotencoder.fit_transform(test["Store Location Type"].values.reshape(-1,1)).toarray()
dfo=pd.DataFrame(x,columns=["store_loc"+str(int(i))for i in range(3)])
test=pd.concat([test,dfo],axis=1)
test.drop("Store Location Type",inplace=True,axis=1)
x=onehotencoder.fit_transform(test["Store Type"].values.reshape(-1,1)).toarray()
dfo=pd.DataFrame(x,columns=["store_type"+str(int(i))for i in range(4)])
test=pd.concat([test,dfo],axis=1)
test.drop("Store Type",inplace=True,axis=1)
ridgepre=clf.predict(test)
#regr = MLPRegressor(random_state=1, max_iter=500).fit(x_train, y_train)
#mlpre=regr.predict(test)